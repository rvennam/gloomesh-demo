# Good Gateway
kind: Gateway
apiVersion: gateway.networking.k8s.io/v1
metadata:
  name: https-httpbin
  namespace: gloo-system
  # annotations:
    # gateway.gloo.solo.io/gateway-parameters-name: gloo-override
spec:
  gatewayClassName: gloo-gateway
  listeners:
  - allowedRoutes:
      namespaces:
        from: All
    name: https
    port: 443
    protocol: HTTPS
    tls:
      mode: Terminate
      certificateRefs:
        - name: upstream-tls
          kind: Secret
---
apiVersion: gateway.gloo.solo.io/v1alpha1
kind: GatewayParameters
metadata:
  name: gloo-override
  namespace: gloo-system
spec:
  kube:
    envoyContainer:
      image:
        registry: quay.io/solo-io
        repository: gloo-ee-envoy-wrapper
        tag: 1.18.2
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: httpbin-good
  namespace: httpbin
spec:
  parentRefs:
    - name: https-httpbin
      namespace: gloo-system
    - name: http
      namespace: gloo-system
  rules:
    - matches:
        - path:
            type: Exact
            value: /headers
        - path:
            value: /status
      backendRefs:
        - name: httpbin
          port: 8000
---
# Bad Route Delegation
kind: Gateway
apiVersion: gateway.networking.k8s.io/v1
metadata:
  name: http-bad-delegated-route
  namespace: httpbin
spec:
  gatewayClassName: gloo-gateway
  listeners:
  - protocol: HTTP
    port: 80
    name: http
    allowedRoutes:
      namespaces:
        from: Selector
        selector:
          matchLabels:
            kubernetes.io/metadata.name: doesn't-exist
---
# Bad Route Delegation
kind: Gateway
apiVersion: gateway.networking.k8s.io/v1
metadata:
  name: http-bad-gatewayclass
  namespace: httpbin
spec:
  gatewayClassName: gloo-gateway2
  listeners:
  - protocol: HTTP
    port: 80
    name: http
    allowedRoutes:
      namespaces:
        from: All
---
# HTTPRoute with a bad backend reference
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: httpbin-bad-backend
  namespace: httpbin
spec:
  parentRefs:
    - name: http
      namespace: gloo-system
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: httpbins
          port: 8000
---
# HTTPRoute with a bad parent reference
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: httpbin-bad-parent
  namespace: httpbin
spec:
  parentRefs:
    - name: httpp
      namespace: gloo-system
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: httpbin
          port: 8000
---
# HTTPRoute with a bad delegation
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: httpbin-cyclic-delegation
  namespace: httpbin
spec:
  parentRefs:
    - name: httpp
      namespace: gloo-system
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
      - group: gateway.networking.k8s.io
        kind: HTTPRoute
        name: "*"
        namespace: httpbin
---
# HTTPRoute with a conflict
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: httpbin-bad-extension
  namespace: httpbin
spec:
  parentRefs:
    - name: http
      namespace: gloo-system
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: httpbin
          port: 8000
      filters:
        - type: ExtensionRef
          extensionRef:
            group: gateway.solo.io
            kind: RouteOption
            name: authhs
---
#HTTPRoute that's orphaned 
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: httpbin-orphaned
  namespace: httpbin
spec:
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: httpbin
          port: 8000
---
apiVersion: gateway.solo.io/v1
kind: ListenerOption
metadata:
  name: listener-option-invalid-target
  namespace: gloo-system
spec:
  options:
    accessLoggingService:
      accessLog:
      - fileSink:
          jsonFormat:
            DURATION: '%DURATION%'
            REQUEST_DURATION: '%REQUEST_DURATION%'
            REQUEST_TX_DURATION: '%REQUEST_TX_DURATION%'
            RESPONSE_DURATION: '%RESPONSE_DURATION%'
            RESPONSE_TX_DURATION: '%RESPONSE_TX_DURATION%'
            authority: '%REQ(:AUTHORITY)%'
            bytes_received: '%BYTES_RECEIVED%'
            bytes_sent: '%BYTES_SENT%'
            downstream_local_address: '%DOWNSTREAM_LOCAL_ADDRESS%'
            downstream_remote_address: '%DOWNSTREAM_REMOTE_ADDRESS%'
            latency_request_out_internal: '%DYNAMIC_METADATA(io.solo.filters.http.proxy_latency:request_out_internal)%'
            latency_response_out: '%DYNAMIC_METADATA(io.solo.filters.http.proxy_latency:response_out)%'
            messageType: '%REQ(x-type)%'
            method: '%REQ(:METHOD)%'
            number: '%REQ(x-number)%'
            path: '%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%'
            protocol: '%PROTOCOL%'
            proxy_latency_request_out: '%DYNAMIC_METADATA(io.solo.filters.http.proxy_latency:request_out)%'
            request_id: '%REQ(X-REQUEST-ID)%'
            requested_server_name: '%REQUESTED_SERVER_NAME%'
            response_code: '%RESPONSE_CODE%'
            response_code_details: '%RESPONSE_CODE_DETAILS%'
            response_flags: '%RESPONSE_FLAGS%'
            route_name: '%ROUTE_NAME%'
            start_time: '%START_TIME%'
            upstream_cluster: '%UPSTREAM_CLUSTER%'
            upstream_host: '%UPSTREAM_HOST%'
            upstream_local_address: '%UPSTREAM_LOCAL_ADDRESS%'
            upstream_service_time: '%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%'
            upstream_transport_failure_reason: '%UPSTREAM_TRANSPORT_FAILURE_REASON%'
            user_agent: '%REQ(USER-AGENT)%'
            x_forwarded_for: '%REQ(X-FORWARDED-FOR)%'
          path: /dev/stdout
  targetRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: http-gateway-rvennam-typo
---
# Expired Secret
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lVSnVzR3dpSCtST1VuQ1BQT1RNYzBLWDBBZ1JFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0t6RVFNQTRHQTFVRUNnd0hjMjlzYnk1cGJ6RVhNQlVHQTFVRUF3d09LaTVuYkc5dmRHVnpkQzVqYjIwdwpIaGNOTWpNd01USTFNRE14TXpNeFdoY05NalF3TVRJMU1ETXhNek14V2pBck1SQXdEZ1lEVlFRS0RBZHpiMnh2CkxtbHZNUmN3RlFZRFZRUUREQTRxTG1kc2IyOTBaWE4wTG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFKTkNFbjRsT1lCaUtSU1pqK1RIMHIxcDBZcmIyZmQ1U2EyY3VqSGhDaFQ2MlJHLwpEUjRkc0VHQjdqb2d2TFU3bjRHcDM5ZjcwL2lHL040cXZXeFpCVVJIdnhVa3RrSllUUW1iV1NDZ0VIUGJUYzdsClpFT2d3Q0FSZ1EzN1V0Q3NQYjdLMk1oNjBBZGdNeE0yNTdqdGVabUF2RUx3bXI5SVZGV29QRS9vWThlVjVlNFMKNHlnU0J2YWt0clk4cjNQQ2dCVGhsaWxkZ1kxTGJTNlBlWGhPekxsRm9uYnlYd0VMVlpPdXB3d1lJOTFScHk4bApCaEtqWi9nMFk4ZHp3RUZ4WWdjM2JEZG1DNGJLY0RFUHIyUWJHOWorOEtXV2NoVlpJRmZFYUlkd1ViWW1FbTl1CmpXRElMUzAwL2Fxd2UzV1lCUUVQOHA2UUJJSzRkVEhlVHk5TG9Cc0NBd0VBQWFOdU1Hd3dIUVlEVlIwT0JCWUUKRk51VmdVOHBUT3J3SkV4aG9iOHE0aDltMVMvSU1COEdBMVVkSXdRWU1CYUFGTnVWZ1U4cFRPcndKRXhob2I4cQo0aDltMVMvSU1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0dRWURWUjBSQkJJd0VJSU9LaTVuYkc5dmRHVnpkQzVqCmIyMHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBR2NXdXo2Y0FUZXJkazdRTGhEc1hGS085ZUNtTkwwLytxdHQKdXFmS1Eya2JFY20rYUtHWTZwVS9EaGV4UUg5T0FvVVJGVWtNZSsrMXp0TE1LUVRKN0dMeW45ZjZZVUgyb2hpKwpGYlEvZ0JjNmJ5SWdsU2diV25KVGZuQ296RDVETVROaDRwNDVJT1dYTHBmOXhFNWZ3VS9WQ1o1bTRTS3Ewc1Y0Cm5ScGFRM3R5NzdackVUZGNDMjAyN3Q2SWp0Y0x0ekt2Q0UzU09UMFpwR1YvSDBISzZsb1cwZXF0akdaV25sdWEKS1BFK1BWMU5QekRRUTdvd0pxamg1akRpWWVFZ1krdTRncWpaY3FHbHhJZnlBTUpCV3lRbDZjcUcrbk5Gb25zOApMUGFOSTkxNlpPd1VOSDhJcWl2bXRFT2hFQjVlTEhHTzBOcVN4RCtiQ0k2SSt3K0c0UXc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ1RRaEorSlRtQVlpa1UKbVkva3g5SzlhZEdLMjluM2VVbXRuTG94NFFvVSt0a1J2dzBlSGJCQmdlNDZJTHkxTzUrQnFkL1grOVA0aHZ6ZQpLcjFzV1FWRVI3OFZKTFpDV0UwSm0xa2dvQkJ6MjAzTzVXUkRvTUFnRVlFTisxTFFyRDIreXRqSWV0QUhZRE1UCk51ZTQ3WG1aZ0x4QzhKcS9TRlJWcUR4UDZHUEhsZVh1RXVNb0VnYjJwTGEyUEs5endvQVU0WllwWFlHTlMyMHUKajNsNFRzeTVSYUoyOGw4QkMxV1RycWNNR0NQZFVhY3ZKUVlTbzJmNE5HUEhjOEJCY1dJSE4ydzNaZ3VHeW5BeApENjlrR3h2WS92Q2xsbklWV1NCWHhHaUhjRkcySmhKdmJvMWd5QzB0TlAycXNIdDFtQVVCRC9LZWtBU0N1SFV4CjNrOHZTNkFiQWdNQkFBRUNnZ0VBUnFIN2tzd3lINVYxMU82dmFYSTdjQ1V3b0NWQ0VJVDV4UytXMDlQNGJRWEIKVnRUSDZ2a2NrTjlNc0U4QmxRQ0xTcnQ3cGZLaHd1U2twNy9pYWZUdEpNb3hLbWdZa0F3Z3I0bjNIMElIZ2pyZgp3R3loUWhyNTdLZll1aWNobXZ2ekJlL3dPWUZIQlRLc2JQdjUrK2JVVzcrM0RYaXhFUzBWWHB5NmlTMlRwcWhTCmZ3VWdYS3FBWnVPemd5dkRBVkIzQjEzalp4b3ZEYURpZUZGZjEySTFMYjRyYjZnTmF0Ym5kWkJrTHJRR3RVZ1EKcVlEOEcyTDJLQkl6VHhCd1N5SEhMQlpyQUNMQ0dGM0RsbSt1TDJhaHEzOXZjZEszcGNQOHlMYWh0U1FOZHhaRApqaWdNWmJxTFdocDFQQ1VIWWdsaFBGM2d0dWJGckhtc0xidXBFaFk4OFFLQmdRQysreUU2dEVoaGpwVWUwR1JkCjBXMXd0ZEpRWm5BVE1kTWJTUUVjTHZmN01Salg3WUUvRytuWDJuTEFaMXhlWDlpRWlXQ0V5S2dWL0ZzQTllZWUKazV0aFVZdUE0TnBHSlI1ZHdFUUt0bnhHMHVINGVOd3l6dW9Ec2lTWXFmYThSRmprRFdyRVpQTklyYkpUTTl0cwpkV3hzdjhNOHNReVRpbG44c1RaRVIxWlE2UUtCZ1FERlpFclVVeGRyTXh2eHQzcnNxck5EdkwwRGs3SmxQdldICnBPRWc0TGsvZFFyWXJRalBhUzREaWRySjBFOG5oY1lIaWxXRU9kTHFIQWZQaHgrVWdIZGdxMFJpOXovVURDZkcKektuVFFIcVhlTm1qRmhnNUFCK2Z3WnBhS2pEK1JTOFNpMElXdGJqaXF5bWtzNTJIcXFtVnlBdTlKUjJDU2o1dApmenVKVHRIbVl3S0JnUUM4aTNlUjJqeC9PK0hTaXhBYlkwLzFienZVTGwzRlJYSlNSSys0NEZIb0J0K3RCWWlOCkFvVEptcHVoZ2ltNTdrdjNCUjFwMmlPL21PVkxQSHBQbnhCT2N0QVVDMmpTeVlDQ00vZTR6OUkvcGFCN3l1NHgKcHY5M2FKOGlyT0d2bXBaYmh6ZDU3dVFVUTQrQy92Wkl6R0NmdUc0S2RBeWplSHBBczcrTWh4VWJTUUtCZ0ROWgpvT0hWYjkweVlZMmpOclpFdmZmY0xLdTJpNDB0TU1DRjB3OHpodDJNUERNYjZKUFVmK1Rwd3VJSGIrQVBPL0lRCk9hajVSZllqTHFEOVBPanI5cUpPUzY4WE5TS2J1dWxMcXM1TEV0aysxaGRJRXlzWTdpRW9RMWc3YTUxcU1CRzUKNm9wdjRkWU53dnFXdzE5Y3RWdEN2Rk1MU2I3d1E0ZEd0eDFFUlBTVEFvR0JBSjI3MXowNXdLdStTRHhaTTdqMApnRkUvbEhsV0ZsS01GeTU5cExsbnNqekVpNTFMakdvVzdYcmZPcEVhTkd3YVhiZFhUdkpuN3VlWWlXZUZkUlNXCmkyUFdiRmxwOUxFem5qbnJHV1IrVWZ2UE9mek9adllCQkhZdFlRVDc4djRtYVNoU1MxS3ZXaXNQL0lKNDhuRDcKKzZmaWx6eWVSN1FXL054dU1YNldBb0QvCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  name: upstream-tls
  namespace: gloo-system
type: kubernetes.io/tls
---
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: RateLimitPolicy
metadata:
  name: httpbin-rate-limit-policy
  namespace: httpbin
spec:
  applyToDestinations:
  - port:
      number: 9080
    selector:
      labels:
        app: httpbin
  config:
    ratelimitClientConfig:
      name: rate-limit-client-config
    ratelimitServerConfig:
      name: rate-limit-server-config
      namespace: gloo-mesh-addons
    serverSettings:
      name: rate-limit-server-settings
---
apiVersion: ratelimit.solo.io/v1alpha1
kind: RateLimitConfig
metadata:
  name: ratelimit-config
  namespace: httpbin
spec:
  raw:
    descriptors:
    - key: generic_key
      value: counterrr
      rateLimit:
        requestsPerUnit: 1
        unit: MINUTE
    rateLimits:
    - actions:
      - genericKey:
          descriptorValue: counter
---
apiVersion: gateway.solo.io/v1
kind: RouteOption
metadata:
  name: ratelimit
  namespace: httpbin
spec:
  options:
    rateLimitConfigs:
      refs:
      - name: ratelimit-config-typo
        namespace: gloo-system
---
apiVersion: gateway.solo.io/v1
kind: VirtualHostOption
metadata:
  name: jwt-bad-target
  namespace: gloo-system
spec:
  targetRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: http-typo
    namespace: gloo-system
  options:
    jwt:
      providers:
        selfminted:
          issuer: solo.io
          jwks:
            local:
              key: |
                -----BEGIN PUBLIC KEY-----
                MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAskFAGESgB22iOsGk/UgX
                BXTmMtd8R0vphvZ4RkXySOIra/vsg1UKay6aESBoZzeLX3MbBp5laQenjaYJ3U8P
                QLCcellbaiyUuE6+obPQVIa9GEJl37GQmZIMQj4y68KHZ4m2WbQVlZVIw/Uw52cw
                eGtitLMztiTnsve0xtgdUzV0TaynaQrRW7REF+PtLWitnvp9evweOrzHhQiPLcdm
                fxfxCbEJHa0LRyyYatCZETOeZgkOHlYSU0ziyMhHBqpDH1vzXrM573MQ5MtrKkWR
                T4ZQKuEe0Acyd2GhRg9ZAxNqs/gbb8bukDPXv4JnFLtWZ/7EooKbUC/QBKhQYAsK
                bQIDAQAB
                -----END PUBLIC KEY-----