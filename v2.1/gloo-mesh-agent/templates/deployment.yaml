# Code generated by skv2. DO NOT EDIT.



{{- $glooMeshAgent := $.Values.glooMeshAgent}}
---

{{- define "gloo-mesh-agent.deploymentSpec"}}

# Deployment manifest for gloo-mesh-agent

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mesh-agent
  annotations:
    app.kubernetes.io/name: gloo-mesh-agent
  name: gloo-mesh-agent
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: gloo-mesh-agent
  template:
    metadata:
      labels:
        app: gloo-mesh-agent
      annotations:
        app.kubernetes.io/name: gloo-mesh-agent
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: gloo-mesh-agent
      containers:
{{- $glooMeshAgent := $.Values.glooMeshAgent }}
{{- $glooMeshAgentImage := $glooMeshAgent.image }}
      - name: gloo-mesh-agent
        image: {{ $glooMeshAgentImage.registry }}/{{ $glooMeshAgentImage.repository }}:{{ $glooMeshAgentImage.tag }}
        imagePullPolicy: {{ $glooMeshAgentImage.pullPolicy }}
        args:
        - run
        - --cluster={{ if $.Values.global }}{{ $.Values.global.cluster }}{{ else }}{{ $.Values.cluster }}{{ end }}
        - --stats-port={{ $.Values.glooMeshAgent.ports.stats }}
        - --grpc-port={{ $.Values.glooMeshAgent.ports.grpc }}
        - --gloo-network-scrape={{ index .Values "gloo-network-agent" "enabled" }}
        - --dev-logger={{ $.Values.devMode }}
        - --relay-address={{ $.Values.relay.serverAddress }}
        - --relay-authority={{ $.Values.relay.authority }}
        - --relay-client-cert-secret-name={{ $.Values.relay.clientTlsSecret.name }}
        - --relay-client-cert-secret-namespace={{ $.Values.relay.clientTlsSecret.namespace | default $.Release.Namespace }}
        - --relay-root-cert-secret-name={{ $.Values.relay.rootTlsSecret.name }}
        - --relay-root-cert-secret-namespace={{ $.Values.relay.rootTlsSecret.namespace | default $.Release.Namespace }}
        - --relay-identity-token-secret-name={{ $.Values.relay.tokenSecret.name }}
        - --relay-identity-token-secret-namespace={{ $.Values.relay.tokenSecret.namespace | default $.Release.Namespace }}
        - --relay-identity-token-secret-key={{ $.Values.relay.tokenSecret.key }}
        - --max-grpc-message-size={{ $.Values.maxGrpcMessageSize }}
        - --metrics-buffer-size={{ $.Values.metricsBufferSize }}
        - --access-logs-buffer-size={{ $.Values.accessLogsBufferSize }}
        - --relay-insecure={{ $.Values.insecure }}
        - --verbose={{ $.Values.verbose }}
        - --leader-election={{ $.Values.leaderElection }}
{{- if $glooMeshAgent.env }}
        env:
{{ toYaml $glooMeshAgent.env | indent 10 }}
{{- end }}
        resources:
{{- if $glooMeshAgent.resources }}
{{ toYaml $glooMeshAgent.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($glooMeshAgent.securityContext) (eq "map[]" (printf "%v" $glooMeshAgent.securityContext)) }}
{{ toYaml $glooMeshAgent.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $glooMeshAgent.securityContext true (eq "bool" (printf "%T" $glooMeshAgent.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMeshAgent.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMeshAgent.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
      {{- if $glooMeshAgentImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $glooMeshAgentImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "gloo-mesh-agent.deploymentSpec" */}}

{{/* Render gloo-mesh-agent deployment template with overrides from values*/}}
{{- if $glooMeshAgent.enabled }}
{{- $glooMeshAgentDeploymentOverrides := dict }}
{{- if $glooMeshAgent.deploymentOverrides }}
{{- $glooMeshAgentDeploymentOverrides = $glooMeshAgent.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $glooMeshAgentDeploymentOverrides "gloo-mesh-agent.deploymentSpec") }}
{{- end }}
---

{{- if $glooMeshAgent.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mesh-agent
  name: gloo-mesh-agent
  namespace: {{ $.Release.Namespace }}
{{- end }}


{{- define "gloo-mesh-agent.serviceSpec"}}

# Service for gloo-mesh-agent
{{/* Define variables in function scope */}}
{{- $glooMeshAgent := $.Values.glooMeshAgent}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-agent
  annotations:
    app.kubernetes.io/name: gloo-mesh-agent
  name: gloo-mesh-agent
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: gloo-mesh-agent
  type: {{ $glooMeshAgent.serviceType }}
  ports:
  - name: http
    port: {{ $glooMeshAgent.ports.http }}
  - name: stats
    port: {{ $glooMeshAgent.ports.stats }}
  - name: grpc
    port: {{ $glooMeshAgent.ports.grpc }}

{{- end }} {{/* define "gloo-mesh-agent.serviceSpec" */}}

{{- if $glooMeshAgent.enabled }}
{{/* Render gloo-mesh-agent service template with overrides from values*/}}
{{- $glooMeshAgentServiceOverrides := dict }}
{{- if $glooMeshAgent.serviceOverrides }}
{{- $glooMeshAgentServiceOverrides = $glooMeshAgent.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $glooMeshAgentServiceOverrides "gloo-mesh-agent.serviceSpec") }}
{{- end }}

---

